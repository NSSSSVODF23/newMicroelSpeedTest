# This file was generated based on ".graphqlconfig". Do not edit manually.

schema {
    query: Query
    mutation: Mutation
    subscription: Subscription
}

interface Page {
    totalElements: Long
}

type AcpHouse {
    address: String
    houseId: Int
    sessions: [AcpSession]
    vlan: Int
}

type AcpSession {
    house: AcpHouse
    ip: String
    login: String
    mac: String
    measures: [Measure]
    sessionId: Int
    vlan: Int
}

type ActiveSession {
    address: String
    deviceId: String
    hasInfo: Boolean
    id: String
    isMobile: Boolean
    isStarted: Boolean
    login: String
}

type ActiveSessionsUpdateProvider {
    object: ActiveSession
    updateType: ListMutationTypes
}

type BeginningMeasure {
    beginningId: String
    connectionType: MeasureConnectionTypes
    created: String
    device: Device
    downloadLoss: Float
    downloadSpeed: Float
    downloadSpeedChart: [SpeedChartPoint]
    downloadStability: Float
    isFailed: Boolean
    isStarted: Boolean
    isUsed: Boolean
    measureId: Int
    ping: Float
    pingJitter: Float
    session: AcpSession
    uploadLoss: Float
    uploadSpeed: Float
    uploadSpeedChart: [SpeedChartPoint]
    uploadStability: Float
}

type BeginningMeasureUpdateProvider {
    object: BeginningMeasure
    updateType: ListMutationTypes
}

type Complaint {
    complaintId: Int
    created: String
    description: String
    phone: String
    processed: User
    processedTime: String
    session: AcpSession
}

type ComplaintPage implements Page {
    content: [Complaint]
    totalElements: Long
}

type ComplaintUpdateProvider {
    object: Complaint
    updateType: ListMutationTypes
}

type CpuUtil {
    cpuUtilId: Int
    load: Float
    stamp: String
}

type Device {
    deviceId: String
    hostname: String
    ip: String
    isMobile: Boolean
    isPro: Boolean
    lastSession: AcpSession
    measures: [Measure]
    platform: String
    system: String
    userAgent: String
}

type DevicePage implements Page {
    content: [Device]
    totalElements: Long
}

type DeviceUpdateProvider {
    object: Device
    updateType: ListMutationTypes
}

type GroupedCTypeDayIntegerPoint {
    g: MeasureConnectionTypes
    x: String
    y: Int
}

type GroupedCTypeStringIntegerPoint {
    g: MeasureConnectionTypes
    x: String
    y: Int
}

type Measure {
    connectionType: MeasureConnectionTypes
    created: String
    device: Device
    downloadLoss: Float
    downloadSpeed: Float
    downloadSpeedChart: [SpeedChartPoint]
    downloadSpeedChartUser: [SpeedChartPoint]
    downloadSpeedUser: Float
    downloadStability: Float
    isFailed: Boolean
    isStarted: Boolean
    isUsed: Boolean
    measureId: Int
    ping: Float
    pingJitter: Float
    session: AcpSession
    uploadLoss: Float
    uploadSpeed: Float
    uploadSpeedChart: [SpeedChartPoint]
    uploadSpeedChartUser: [SpeedChartPoint]
    uploadSpeedUser: Float
    uploadStability: Float
}

type MeasurePage implements Page {
    content: [Measure]
    totalElements: Long
}

type MeasureUpdateProvider {
    object: Measure
    updateType: ListMutationTypes
}

type Mutation {
    createUser(user: IUser): User
    deleteUser(userId: Int): User
    doProcessedComplaint(id: Int, username: String): Boolean
    editUser(user: IUser): User
    setDeviceMode(deviceId: String, mode: Boolean): Boolean
}

type NetworkUtil {
    networkUtilId: Int
    rx: Float
    stamp: String
    tx: Float
}

type PerformanceInfo {
    cpuChartData: [TimeDoublePoint]
    memoryChartData: [TimeLongPoint]
    receivedChartData: [TimeDoublePoint]
    totalMemoryChartData: [TimeLongPoint]
    transceivedChartData: [TimeDoublePoint]
}

type Query {
    getActiveSession: [ActiveSession]
    getAllHouses: [AcpHouse]
    getAllMeasures: [Measure]
    getAllRoles: [RoleGroup]
    getAllUsers: [User]
    getAvgAllFeedbacks: Float
    getBeginningMeasures: [BeginningMeasure]
    getComplaints(dateFilter: ITimeRange, isProcessed: Boolean, limits: IPagination, matchingObject: IComplaint): ComplaintPage
    getCpuStatistic(timeRange: ITimeRange): [CpuUtil]
    getDevices(limit: IPagination, matchingObject: IDevice): DevicePage
    getMeasure(id: Int): Measure
    getMeasures(dateFilter: ITimeRange, limits: IPagination, matchingObject: IMeasure): MeasurePage
    getMeasuringCountsFromPeriod(timeRange: ITimeRange): Int
    getMeasuringCountsInAddresses(timeRange: ITimeRange): [GroupedCTypeStringIntegerPoint]
    getMeasuringCountsInDays(timeRange: ITimeRange): [GroupedCTypeDayIntegerPoint]
    getNetworkStatistic(timeRange: ITimeRange): [NetworkUtil]
    getRamStatistic(timeRange: ITimeRange): [RamUtil]
    getTotalComplaints(filter: ComplaintsFilter): Int
    getTotalDevices(matchingObject: IDevice): Int
    getTotalFeedbacks: Long
    getTotalMeasures(filter: MeasureFilter): Int
    getUserByUsername(username: String): User
    validateLogin(login: String): Boolean
}

type RamUtil {
    ramUtilId: Int
    stamp: String
    total: Int
    utilized: Int
}

type RoleGroup {
    description: String
    groupName: String
    roleId: Int
}

type SpeedChartPoint {
    speed: Float
    stamp: Int
}

type Subscription {
    getPerformance: PerformanceInfo
    updateActiveSession: ActiveSessionsUpdateProvider
    updateBeginningMeasures: BeginningMeasureUpdateProvider
    updateComplaints: ComplaintUpdateProvider
    updateDevices: DeviceUpdateProvider
    updateMeasures: MeasureUpdateProvider
    updateUsers: UserUpdateProvider
}

type TimeDoublePoint {
    x: String
    y: Float
}

type TimeLongPoint {
    x: String
    y: Int
}

type User {
    avatar: [Int]
    created: String
    lastLogin: String
    name: String
    password: String
    role: RoleGroup
    userId: Int
    username: String
}

type UserUpdateProvider {
    object: User
    updateType: ListMutationTypes
}

enum ListMutationTypes {
    ADD
    DELETE
    UPDATE
}

enum MeasureConnectionTypes {
    ETHERNET
    WIFI
}

"scalar JSON"
scalar Long

input ComplaintsFilter {
    address: Int
    end: String
    first: Int
    ip: String
    login: String
    mac: String
    phone: String
    processed: Boolean
    rows: Int
    start: String
}

input IAcpHouse {
    address: String
    houseId: Int
    sessions: [IAcpSession]
    vlan: Int
}

input IAcpSession {
    house: IAcpHouse
    ip: String
    login: String
    mac: String
    measures: [IMeasure]
    sessionId: Int
    vlan: Int
}

input IComplaint {
    complaintId: Int
    created: String
    description: String
    phone: String
    processed: IUser
    processedTime: String
    session: IAcpSession
}

input IDevice {
    deviceId: String
    hostname: String
    ip: String
    isMobile: Boolean
    isPro: Boolean
    lastSession: IAcpSession
    measures: [IMeasure]
    platform: String
    system: String
    userAgent: String
}

input IMeasure {
    connectionType: MeasureConnectionTypes
    created: String
    device: IDevice
    downloadLoss: Float
    downloadSpeed: Float
    downloadSpeedChart: [ISpeedChartPoint]
    downloadSpeedChartUser: [ISpeedChartPoint]
    downloadSpeedUser: Float
    downloadStability: Float
    isFailed: Boolean
    isStarted: Boolean
    isUsed: Boolean
    measureId: Int
    ping: Float
    pingJitter: Float
    session: IAcpSession
    uploadLoss: Float
    uploadSpeed: Float
    uploadSpeedChart: [ISpeedChartPoint]
    uploadSpeedChartUser: [ISpeedChartPoint]
    uploadSpeedUser: Float
    uploadStability: Float
}

input IPagination {
    limit: Int
    offset: Int
}

input IRoleGroup {
    description: String
    groupName: String
    roleId: Int
}

input ISpeedChartPoint {
    speed: Float
    stamp: Int
}

input ITimeRange {
    end: String
    start: String
}

input IUser {
    avatar: [Int]
    created: String
    lastLogin: String
    name: String
    password: String
    role: IRoleGroup
    userId: Int
    username: String
}

input MeasureFilter {
    address: Int
    end: String
    first: Int
    ip: String
    login: String
    mac: String
    rows: Int
    start: String
}
